Technical Design Document
By: Christopher Altimeaux
Date: 07/07/2024

Summary
A program that creates a bank account class. This allows the creation of bank account objects that can perform various functions such as withdrawing and depositing money.

Variables
* self.name
* self.account_number
* self.balance
* self.interest_rate
* b1

Functions
* __init__()
* set_interest_rate()
* withdraw_money()
* deposit_money()
* calculate_interest_rate()
* __str__()
* test_BankAcct()

Design Process
1. Create the BankAcct class using the class keyword.
2. Within the BankAcct class, define the __init__ magic method with the following code:
def __init__(self, name, account_number, balance, interest_rate):
    self.name = name
    self.account_number = account_number
    self.balance = balance
    self.interest_rate = interest_rate

This creates the self.name, self.account_number, self.balance, and self.interest_rate instance variables everytime an object is initialized. These instance variables are then set equal to arguments passed in when an object is instantiated from the class.

3.Define the set_interest_rate() method with the arguments self, and new_rate.
4. Inside the set_interest_rate() method, set self.interest_rate equal to new rate.
5. Exit the set_interest_rate() method and define the withdraw_money() with the following code:
def withdraw_money(self, amount):
    if amount <= self.balance:
        self.balance -= amount
        print(f"You have successfully withdrawn ${amount:.2f}. Your current balance in now ${self.balance:.2f}.")
    else:
        print(f"You do not have the sufficient funds to withdraw ${amount:.2f}."
              f" Your current balance is ${self.balance:.2f}.")
The withdraw_money method takes two arguments: self and amount. The self argument refers to the object itself and amount refers to the money being withdrawn. An if/else block is created to ensure that there is enough money in the account to withdraw. If there is, then this method will deduct amount from the balance instance variable and tell the user that money has been withdrawn. Otherwise, the method informs the user that there is not enough money in the account and displays the current balance.

6. Define the deposit_money() method with two arguments: self and amount.
7. Inside the deposit_money() method, increment the self.balance by amount.
8. Add a print statement that displays the new self.balance.
9. Exit the deposit_money() method and define the calculate_interest_amount() method with the following code:
def calculate_interest_amount(self, days):
    interest_per_day = (self.balance * self.interest_rate) / 365
    interest_amount = interest_per_day * days
    print(f"The amount of interest accrued after {days} days is ${interest_amount:.2f}.")

The calculate_interest_amount method takes two arguments: self and days.
The interest_per_day variable calculates the interest accumulated each day using the formula above. Afterwards, interest_amount calculates the total interest after a certain number of days by multiplying interest_per_day by days. Finally, a print statement provides the interest accrued after the specified number of days has passed.

10. Exit the calculate_interest_amount method and define the __str__() method with the argument self.
11. Inside the __self__() method, use the following code:
def __str__(self):
    return ("Name: {}\n"
            "Account Number: {}"
            "\nBalance: ${:.2f}"
            "\nInterest Rate: {:.2f}%").format(
        self.name, self.account_number, float(self.balance), float(self.interest_rate * 100)
    )

The .format() method is used display each of the instance variables whenever a BankAcct object is printed. Each instance variable is passed through the open brackets. The self.balance and self.interest_rate have precision modifiers to display only two decimal places. The formatted string is then returned.

12. Exit the __str__() method and the BankAcct class.
13. Define the test_BankAcct function() with no arguments.
14. Within the test_BankAcct function, create the b1 BankAcct object with the following syntax:
	b1 = BankAcct("Christopher Altimeaux", 24588442545, 1000, 0.07)

This creates a BankAcct object and passes values in for the instance variables. These values are important as they will be used to test the class.

15. Print the b1 object.
16. Call the b1 object’s .withdraw_money() method and pass in the value 50.
17. Call the b1 object’s .withdraw_money() method and pass in the value 1000.
18. Call the b1 object’s .calculate_interest_rate() method and pass in the value 120.
19 Call the b1 object’s .set_interest_rate() method and pass in the value 0.10.
20. Call the b1 object’s .calculate_interest_amount method and pass in the value 120.
21. Exit the test_BankAcct() block and call the function.
GitHub: github.com/CallMeChris52/COP2373
