# A program that simulate the growth of a city over a 20-year time period and display the results on a graph.

import sqlite3
import numpy as np
import matplotlib.pyplot as plt


# A function that will simulate population growth over 20 years and return a numpy array.
def simulate_population(population):
    # Creates an uninitialized numpy array with 21 elements that converts the data type of each element into an integer.
    population_list = np.empty(21, int)

    # A for loop that iterates 21 times (or for the next 20 years) to calculate and store the population at a that
    # particular year.
    for i in range(21):
        population_list[i] = population * 1.02 ** i

    return population_list


# A function that will prompt the user to select one of 10 cities and display its population growth visually.
def display_growth():
    city = input("Which city's population would you like to view : Jacksonville, Miami, Tampa, Orlando, "
                 "St.Petersburg, Hialeah, Port St. Lucie, Cape Coral, Tallahassee or Fort Lauderdale? ")

    # Uses the sqlite3 .connect() and .cursor() methods to create connection and cursor objects.
    connection = sqlite3.connect("population_CA.db")
    cursor = connection.cursor()
    print("You have successfully connected to the population database.")

    # Uses the cursor.execute() method to select the user's desired city from the POPULATION table.
    cursor.execute(f"SELECT * FROM POPULATION WHERE city = '{city.title()}' AND year = 2023")

    # Retrieves one record from the table that meets the WHERE condition.
    record = cursor.fetchone()

    # Creates a numpy array that will range from the year 2023 to year 2044.
    years = np.linspace(2023, 2044, 21)

    # Creates a graph using the years array as the x-axis and the population_list array generated by
    # simulate_population function as the y-axis.
    plt.plot(years, simulate_population(record[2]))
    print("City data was successfully loaded.")

    # Calls the matplotlib .show() method to display the graph.
    plt.show()

    # Closes the database connection.
    cursor.close()
    print("The population_CA database was successfully closed.")


# The main function that will create the population_CA database and generate the graph.
def main():
    # Establishes a database connection and creates a cursor object using  sqlite3 methods.
    connection = sqlite3.connect("population_CA.db")
    cursor = connection.cursor()
    print("You have successfully connected to the population_CA database.")

    # Drops the table if it already exists.
    cursor.execute("DROP TABLE IF EXISTS POPULATION")

    # Calls the cursor .execute() method to create the POPULATION table.
    cursor.execute("CREATE TABLE POPULATION("
                   "city TEXT,"
                   "year INT,"
                   "population INT);")
    print("The POPULATION table has been created successfully.")

    # Calls the cursor .execute() method to insert data to the table. Uses a for loop and the simulate_growth
    # function to insert the population for each city over the next 20 years.
    for i in range(21):
        cursor.execute(f"""INSERT INTO POPULATION VALUES(
                        'Jacksonville', {2023 + i} , {simulate_population(955408)[i]})""")
        cursor.execute(f"""INSERT INTO POPULATION VALUES(
                                'Miami', {2023 + i} , {simulate_population(441713)[i]})""")
        cursor.execute(f"""INSERT INTO POPULATION VALUES(
                                'Tampa', {2023 + i} , {simulate_population(387450)[i]})""")
        cursor.execute(f"""INSERT INTO POPULATION VALUES(
                                'Orlando', {2023 + i} , {simulate_population(310875)[i]})""")
        cursor.execute(f"""INSERT INTO POPULATION VALUES(
                                'St. Petersburg', {2023 + i} , {simulate_population(258210)[i]})""")
        cursor.execute(f"""INSERT INTO POPULATION VALUES(
                                'Hialeah', {2023 + i} , {simulate_population(221300)[i]})""")
        cursor.execute(f"""INSERT INTO POPULATION VALUES(
                                'Port St. Lucie', {2023 + i} , {simulate_population(218195)[i]})""")
        cursor.execute(f"""INSERT INTO POPULATION VALUES(
                                'Cape Coral', {2023 + i} , {simulate_population(204788)[i]})""")
        cursor.execute(f"""INSERT INTO POPULATION VALUES(
                                'Tallahassee', {2023 + i} , {simulate_population(196250)[i]})""")
        cursor.execute(f"""INSERT INTO POPULATION VALUES(
                                'Fort Lauderdale', {2023 + i} , {simulate_population(182060)[i]})""")

    print("The data has successfully been inserted into the POPULATION table.")
    # Calls the connection .commit() method to save the changes to the database.
    connection.commit()

    # Closes the connection to the database.
    cursor.close()
    print("The population database connection_CA has been closed.")

    # Calls the display_growth function to display a graph with the recently inserted data.
    display_growth()


main()
